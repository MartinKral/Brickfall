class BrickController {

    field int fallenBricksCount;
    field int tickCounter;

    field Array brickArray;  
    field int brickArrayLength;

    field int movesToSkip;
    field int currentMovesToSkip; 
    field int movesSkipped;
 
    field PoorRandomizer poorRandomizer;

    constructor BrickController new(int numberOfBricks) {
        var int index;
        var int randomPositionX;
        var Brick brick;        
        
        let movesToSkip = 5;
        let currentMovesToSkip = movesToSkip;
        let movesSkipped = 0;
      

        let fallenBricksCount = 0;
        let tickCounter = 0;

        let brickArrayLength = numberOfBricks;
        let brickArray = Array.new(brickArrayLength);  

        let poorRandomizer = PoorRandomizer.new();

        let index = 0;
        while (index < brickArrayLength) { 
            let randomPositionX = poorRandomizer.getRandom(index, 31); 
            let brick = Brick.new(randomPositionX, 0, index);
            let brickArray[index] = brick; 

            let index = index +1;            
        }



        return this;
    }

    method void update() {  
        let tickCounter = tickCounter + 1;

        let movesSkipped = movesSkipped +1;
        if (currentMovesToSkip < movesSkipped) {
            let movesSkipped = 0;
            do resetFallenBricks();
            do moveBricks();
        }

        return;     
    }

    method void moveBricks() {
        var int index;
        var Brick brick;

        let index = 0;
        while (index < brickArrayLength) {
            let brick = brickArray[index];
            do brick.tryMove();

            let index = index + 1;
        }

        return;
    }

    method void resetFallenBricks() {
        var int index;
        var Brick brick;

        let index = 0;
        while (index < brickArrayLength) {
            let brick = brickArray[index];
            do tryResetBrick(brick);

            let index = index + 1;

       
        }

 
        return;
    }

    method void tryResetBrick(Brick brick) {
        var int y;
        var int newPositionX;

        let y = brick.getY();

        // brick is on the floor
        if (y = 15) { 
            let newPositionX = poorRandomizer.getRandom(tickCounter, 31);
            let fallenBricksCount = fallenBricksCount + 1;
            do brick.setPosition(newPositionX,0);
            

            if (0 < currentMovesToSkip) {
                let currentMovesToSkip = movesToSkip - (fallenBricksCount / brickArrayLength);
            }
        }

        return;
    }

    method int getFallenBricksCount() {
        var int count;
        let count = fallenBricksCount;
        return count;
    }

    method boolean hasBrickAtPosition(int x, int y) {
        
        var int index;
        var Brick brick;
        var int brickX;
        var int brickY;

        var boolean isBrickAtPosition;
        let isBrickAtPosition = false;


        let index = 0;
        while (index < brickArrayLength) {   
            let brick = brickArray[index];

            let brickX = brick.getX();
            let brickY = brick.getY();

            if (brickX = x) {
                if (brickY = y) {
                    let isBrickAtPosition = true;
                }
            }     

            let index = index + 1;  
        }


        return isBrickAtPosition;
    }




}